class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        boolean visited[]=new boolean[V];
        Stack<Integer>stack=new Stack<>();
        for(int i=0;i<V;i++){
            if(!visited[i]){
                dfs(adj,i,stack,visited);
            }
        }
        int ans[]=new int[V];
        int i=0;
        while(!stack.isEmpty()){
            ans[i++]=stack.pop();
        }
        return ans;
    }
    static void dfs(ArrayList<ArrayList<Integer>>adj,int v,Stack<Integer>stack,boolean visited[]){
        visited[v]=true;
        for(int neighbour:adj.get(v)){
            if(!visited[neighbour]){
                dfs(adj,neighbour,stack,visited);
                
            }
        }
        stack.push(v);
    }
}
